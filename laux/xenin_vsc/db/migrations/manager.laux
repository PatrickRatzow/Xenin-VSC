public class XeninVSC.MigrationManager
    public constructor(conn = XeninVSC:GetDatabaseConnection())
        self.conn = conn
    end

    public setMigrationsDirectory(dir)
        self.dir = dir

        return self
    end

    public setAddonId(id)
        self.addonId = id
        
        return self
    end

    private getMigrations()
        local files, folders = file.Find(self.dir .. "/*.lua", "LUA")
        local migrations = {}
        for i, v in ipairs(files) do
            local migration =  include(self.dir .. "/" .. v)()
            migration:setName(v)

            migrations[#migrations + 1] = migration
        end

        return migrations
    end

    public async run()
        local migrations = self:getMigrations()
        local repo = XeninVSC:GetRepository("Migration")
        local tbls = await repo:createMigrationTables()
        local migs = await repo:findMigrations(migrations)

        local migrationsToRun = {}
        for i, v in ipairs(migrations) do
            local name = v:getName()
            continueif migs[name]

            table.insert(migrationsToRun, v)
        end

        local runMigrations = await repo:runMigrations(migrationsToRun)
        
        return runMigrations:getData()
    end

    public static async migrationRun(ply)
        print("Running Migration")
        local manager = await XeninVSC.MigrationManager()
            :setMigrationsDirectory("xenin_vsc/db/providers/mysql/migrations")
            :setAddonId("xenin_vsc")
            :run()

        print("Migration done")
    end
end

local console = XeninVSC.Console
console.commands = {}
console:addCommand({ "migration", "run" }, XeninVSC.MigrationManager.migrationRun)